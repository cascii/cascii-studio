use std::fs::{self, File};
use std::io::{BufWriter, Write, Read};
use std::path::Path;
use walkdir::WalkDir;

fn main() {
    let assets_dir = "src/assets/cascii";
    let out_dir = std::env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("ascii_frames.rs");
    let mut file = BufWriter::new(File::create(&dest_path).unwrap());

    writeln!(
        &mut file,
        "// Generated by build.rs. Do not edit.\n"
    )
    .unwrap();
    writeln!(
        &mut file,
        "use once_cell::sync::Lazy;\nuse std::collections::HashMap;\n"
    )
    .unwrap();
    writeln!(&mut file, "pub static ASCII_PROJECTS: Lazy<HashMap<&'static str, Vec<&'static str>>> = Lazy::new(|| {{").unwrap();
    writeln!(&mut file, "    let mut m = HashMap::new();").unwrap();

    if let Ok(entries) = fs::read_dir(assets_dir) {
        for entry in entries.flatten() {
            if entry.file_type().map(|t| t.is_dir()).unwrap_or(false) {
                let project_name = entry.file_name().to_string_lossy().to_string();
                let project_path = entry.path();
                let mut frame_files = Vec::new();

                for frame_entry in WalkDir::new(&project_path)
                    .into_iter()
                    .filter_map(|e| e.ok())
                {
                    if frame_entry.path().extension().map_or(false, |e| e == "txt") {
                        if let Some(name) = frame_entry.path().file_name().and_then(|n| n.to_str()) {
                            if name.starts_with("frame_") {
                                frame_files.push((name.to_string(), frame_entry.path().to_path_buf()));
                            }
                        }
                    }
                }

                // Sort frames numerically
                frame_files.sort_by(|a, b| {
                    let num_a: u32 = a.0
                        .split('_')
                        .last()
                        .and_then(|s| s.split('.').next())
                        .and_then(|n| n.parse().ok())
                        .unwrap_or(0);
                    let num_b: u32 = b.0
                        .split('_')
                        .last()
                        .and_then(|s| s.split('.').next())
                        .and_then(|n| n.parse().ok())
                        .unwrap_or(0);
                    num_a.cmp(&num_b)
                });

                writeln!(&mut file, "    m.insert(\"{}\", vec![", project_name).unwrap();
                for (_, path) in frame_files {
                    // Read the file content and embed it as a string literal
                    if let Ok(mut f) = File::open(&path) {
                        let mut content = String::new();
                        if f.read_to_string(&mut content).is_ok() {
                            // Escape the content for use in a string literal
                            let escaped = content
                                .replace('\\', "\\\\")
                                .replace('"', "\\\"")
                                .replace('\n', "\\n")
                                .replace('\r', "\\r")
                                .replace('\t', "\\t");
                            writeln!(&mut file, "        \"{}\",", escaped).unwrap();
                        }
                    }
                }
                writeln!(&mut file, "    ]);").unwrap();
            }
        }
    }

    writeln!(&mut file, "    m\n}});").unwrap();

    println!("cargo:rerun-if-changed=src/assets/cascii");
}
